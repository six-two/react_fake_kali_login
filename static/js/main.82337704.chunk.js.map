{"version":3,"sources":["serviceWorker.ts","app/MenuBarItem.tsx","app/StatusBar.tsx","app/FullscreenManager.tsx","app/redux/actions.ts","app/redux/reducer.ts","app/redux/store.ts","app/ScreenLogin.tsx","app/TurnedOffScreen.tsx","app/ScreenManager.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","StatusBar","defaultProps","disable","onClick","props","name","dom","this","icon","src","alt","undefined","classNames","push","selected","className","join","React","Component","SESSION_MENU","menuItems","KEYBOARD_MENU","ACCESSIBILITY_MENU","SHUTDOWN_MENU","onMenuSelected","state","disableMenus","renderMenu","id","format","menu","disabled","activeMenu","ReduxStatusBar","connect","ownProps","dispatch","FullscreenManager","requestFullscreen","setState","isFullscreen","showContents","alwaysShowContents","handleKeys","handleFocusableElements","onKeyEvent","enabled","onChange","children","setScreen","newValue","type","payload","reducer","action","console","warn","fallbackState","username","screen","password","devTools","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","ScreenLogin","screenOff","TurnedOffScreen","ScreenManager","renderContent","ReduxScreenManager","App","trigger","position","on","closeOnDocumentClick","mouseLeaveDelay","mouseEnterDelay","arrow","style","color","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82337704.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nexport default class StatusBar extends React.Component<Props> {\n  defaultProps = {\n    disable: false,\n  };\n\n  render() {\n    let dom = this.props.icon ?\n      <img src={this.props.icon} alt={this.props.name} />\n      : this.props.name;\n    let onClick = this.props.disable ? this.onClick : undefined;\n    let classNames = [\"menu-bar-item\"];\n    if (this.props.disable) {\n      classNames.push(\"menu-disabled\");\n    } else if (this.props.selected) {\n      classNames.push(\"menu-selected\");\n    }\n    return <div className={classNames.join(\" \")} onClick={onClick}>\n      {dom}\n    </div>\n  }\n\n  onClick = () => {\n    this.props.onClick(this.props.name);\n  }\n}\n\ninterface Props {\n  name: string,\n  icon?: string,\n  disable?: boolean,\n  selected: boolean,\n  onClick: (name: string) => void,\n}\n","import React from 'react';\nimport Clock from 'react-live-clock';\nimport Menu, { SubMenu, MenuItem } from 'rc-menu';\nimport { connect } from 'react-redux';\nimport { ReduxState } from './redux/store';\nimport MenuBarItem from './MenuBarItem';\n\n\nconst SESSION_MENU: MenuData = {\n  name: \"session\",\n  icon: \"img/bars.png\",\n  menuItems: [\"Test\", \"123\"],\n};\n\nconst KEYBOARD_MENU: MenuData = {\n  name: \"English\",\n  menuItems: [\"English - US\"],\n};\n\nconst ACCESSIBILITY_MENU: MenuData = {\n  name: \"accessibility\",\n  icon: \"img/accessibility.png\",\n  menuItems: [\"Test\", \"123\"],\n};\n\nconst SHUTDOWN_MENU: MenuData = {\n  name: \"shutdown\",\n  icon: \"img/shutdown.png\",\n  menuItems: [\"Suspend\"],\n};\n\nclass StatusBar extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    let disableMenu = this.props.disableMenus ? true : undefined;\n    //TODO render menu popup\n    return <div className=\"status-bar h-flex\">\n      <div className=\"hostname\">{this.props.hostname}</div>\n      <div className=\"expand\"></div>\n\n      {this.renderMenu(SESSION_MENU)}\n      {this.renderMenu(KEYBOARD_MENU)}\n      {this.renderMenu(ACCESSIBILITY_MENU)}\n      <div id=\"clock\"><Clock format={'MMM D, HH:mm'} /></div>\n      {this.renderMenu(SHUTDOWN_MENU)}\n    </div>\n  }\n\n  renderMenu(menu: MenuData) {\n    let disabled = this.props.disableMenus ?? false;\n    let selected = menu.name === this.state.activeMenu;\n    return <MenuBarItem name={menu.name} icon={menu.icon}\n      disable={disabled}\n      selected={selected} onClick={this.onMenuSelected} />\n  }\n\n  onMenuSelected = (name: string) => {\n    // this.setState({activeMenu: });\n  }\n}\n\ninterface State {\n  activeMenu?: string,\n}\n\ninterface Props {\n  hostname: string,\n  disableMenus?: boolean,\n}\n\ninterface MenuData {\n  name: string,\n  icon?: string,\n  menuItems: string[],\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    hostname: state.hostname,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    // updatedClipbordManager: () => dispatch(updatedClipbordManager()),\n  };\n};\n\nconst ReduxStatusBar = connect(mapStateToProps, mapDispatchToProps)(StatusBar);\nexport default ReduxStatusBar;\n","import React, { Component } from \"react\";\nimport Fullscreen from \"react-full-screen\";\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nclass FullscreenManager extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isFullscreen: false,\n    };\n  }\n\n  requestFullscreen = () => {\n    this.setState({ isFullscreen: true });\n  }\n\n  render() {\n    let showContents = this.state.isFullscreen;\n    if (this.props.alwaysShowContents === true) {\n      showContents = true;\n    }\n    return (\n      <div>\n        <KeyboardEventHandler handleKeys={[\"ctrl+space\"]} handleFocusableElements\n          onKeyEvent={this.requestFullscreen} />\n\n        <Fullscreen\n          enabled={this.state.isFullscreen}\n          onChange={isFullscreen => this.setState({ isFullscreen: isFullscreen })}\n        >\n          {showContents && this.props.children}\n        </Fullscreen>\n      </div>\n    );\n  }\n}\n\ninterface Props {\n  alwaysShowContents?: boolean,\n}\n\ninterface State {\n  isFullscreen: boolean;\n}\n\nexport default FullscreenManager;\n","// action types\nexport const SET_USERNAME = \"SET_USERNAME\";\nexport const SET_PASSWORD = \"SET_PASSWORD\";\nexport const SET_SCREEN = \"SET_SCREEN\";\nexport const SET_HOSTNAME = \"SET_HOSTNAME\";\n\n// screens\nexport const SCREEN_OFF = \"SCREEN_OFF\";\nexport const SCREEN_HIBERNATE = \"SCREEN_HIBERNATE\";\nexport const SCREEN_SUSPEND = \"SCREEN_SUSPEND\";\nexport const SCREEN_LOGIN = \"SCREEN_LOGIN\";\n\n// actions\nexport interface ActionWithoutPayload {\n  type: string,\n}\n\nexport interface SetStringAction {\n  type: string,\n  payload: string,\n}\n\nexport type Action = ActionWithoutPayload | SetStringAction;\n\n// action creators\nexport function setUsername(newValue: string): SetStringAction {\n  return {\n    type: SET_USERNAME,\n    payload: newValue,\n  };\n}\n\nexport function setPassword(newValue: string): SetStringAction {\n  return {\n    type: SET_PASSWORD,\n    payload: newValue,\n  };\n}\n\nexport function setHostname(newValue: string): SetStringAction {\n  return {\n    type: SET_HOSTNAME,\n    payload: newValue,\n  };\n}\n\nexport function setScreen(newValue: string): SetStringAction {\n  return {\n    type: SET_SCREEN,\n    payload: newValue,\n  };\n}\n","import * as Actions from './actions';\nimport { ReduxState, fallbackState } from './store';\n\nexport function reducer(state: ReduxState | undefined, action: Actions.Action): ReduxState {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = fallbackState;\n  }\n\n  switch (action.type) {\n    case Actions.SET_USERNAME: {\n      let payload = (action as Actions.SetStringAction).payload;\n      return {\n        ...state,\n        username: payload,\n      };\n    }\n    case Actions.SET_SCREEN: {\n      let payload = (action as Actions.SetStringAction).payload;\n      return {\n        ...state,\n        screen: payload,\n      };\n    }\n  }\n  return state;\n}\n\nexport default reducer;\n","import { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport { SCREEN_LOGIN } from './actions';\n\nexport interface ReduxState {\n  hostname: string,\n  screen: string,\n  username: string,\n  password: string,\n}\n\nexport const fallbackState: ReduxState = {\n  hostname: \"Kali Linux\",\n  screen: SCREEN_LOGIN,\n  username: \"\",\n  password: \"\",\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nexport const store = createStore(reducer, fallbackState, devTools);\nexport default store;\n","import React from 'react';\nimport StatusBar from './StatusBar';\nimport store from './redux/store';\nimport { setScreen, SCREEN_OFF } from './redux/actions';\n\nexport default class ScreenLogin extends React.Component {\n  render() {\n    return <div className=\"fill-screen\">\n      <StatusBar />\n      <button onClick={this.screenOff}>Test: screen off</button>\n    </div>\n  }\n\n  screenOff = () => {\n    store.dispatch(setScreen(SCREEN_OFF));\n  }\n}\n","import React from 'react';\n\nexport default class TurnedOffScreen extends React.Component {\n  render() {\n    return <div className=\"screen-off fill-screen\">\n    </div>\n  }//TODO props with type (like suspend)\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { SCREEN_LOGIN, SCREEN_OFF } from './redux/actions';\nimport { ReduxState } from './redux/store';\nimport ScreenLogin from './ScreenLogin';\nimport ScreenOff from './TurnedOffScreen';\n\n\nclass ScreenManager extends React.Component<Props> {\n  render() {\n    return <div className=\"screen-manager fill-screen\">\n      {this.renderContent()}\n    </div>\n  }\n\n  renderContent() {\n    switch (this.props.screen) {\n      case SCREEN_LOGIN:\n        return <ScreenLogin />;\n      case SCREEN_OFF:\n        return <ScreenOff />;\n      default:\n        return <h1>{`Unknown screen: \"${this.props.screen}\"`}</h1>\n    }\n  }\n}\n\ninterface Props {\n  screen: string,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    screen: state.screen,\n  };\n};\n\nconst ReduxScreenManager = connect(mapStateToProps)(ScreenManager);\nexport default ReduxScreenManager;\n","import React from 'react';\nimport Menu, { SubMenu, MenuItem } from 'rc-menu';\nimport Popup from \"reactjs-popup\";\nimport '../css/App.scss';\nimport TurnedOffScreen from './TurnedOffScreen';\nimport StatusBar from './StatusBar';\nimport FullscreenManager from './FullscreenManager';\nimport ScreenManager from './ScreenManager';\n\n// TODOs\n\n// --- Nice to have ---\n\nconst DEBUG = true;\n\n\nexport default class App extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"App\">\n      <h1>TODO</h1>\n      <StatusBar />\n      <div className=\"menu\">\n        <div className=\"menu-item\"> Menu item 1</div>\n        <div className=\"menu-item\"> Menu item 2</div>\n        <div className=\"menu-item\"> Menu item 3</div>\n        <Popup\n          trigger={<div className=\"menu-item\"> Sub menu </div>}\n          position=\"bottom left\"\n          on=\"hover\"\n          closeOnDocumentClick\n          mouseLeaveDelay={300}\n          mouseEnterDelay={0}\n          arrow={false}\n        >\n          <div className=\"menu\">\n            <div className=\"menu-item\"> item 1</div>\n            <div className=\"menu-item\"> item 2</div>\n            <div className=\"menu-item\"> item 3</div>\n          </div>\n        </Popup>\n        <div className=\"menu-item\"> Menu item 4</div>\n      </div>\n      <FullscreenManager alwaysShowContents={DEBUG}>\n        <ScreenManager />\n        <h1 style={{ color: \"red\" }}>Fullscreen content</h1>\n      </FullscreenManager>\n    </div>\n  }\n}\n\ninterface State {\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport { store } from './app/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}